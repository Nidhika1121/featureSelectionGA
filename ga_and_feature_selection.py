# -*- coding: utf-8 -*-
"""GA and Feature Selection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DQ2ZUzSIxWWe8gjuAqNhDjDDchRsJYko
"""

pip install geneticalgorithm

import pandas as pd
import numpy as np
import sklearn
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from geneticalgorithm import geneticalgorithm as ga

dataset = pd.read_csv('/content/colon_cancer.csv')
numRows, numCols =  np.shape(dataset)


#arrayIndx = [False, True,True]

def getIndx(arrayIndx):
  lenArr = len(arrayIndx)
  arrayOutput=np.zeros(lenArr)
  j=0
  for i in range(lenArr):
    if arrayIndx[i] == True:
      arrayOutput[j] = i
      j=j+1
    #print(arrayOutput)
    return arrayOutput


#combinational_array = np.array([[0,1]]*3)


def f(combinational_array):
  #X=dataset.iloc[0:numRows, 0:2].values
  print('the new ga array is: ')
  print(getIndx(combinational_array))
  print(combinational_array)

  X=dataset.iloc[0:numRows, getIndx(combinational_array)].values
  Y = dataset.iloc[0:numRows, numCols-1].values
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)
  svmModel  = svm.SVC()
  svmModel.fit(X_train, Y_train)
  X_Predict = svmModel.predict(X_test)
  predictedValue = accuracy_score(X_Predict, Y_test)
  return predictedValue


length = 10
#length = len(document_text)
similarity_i = np.zeros(length)
print("length is : ", length)



dataset = pd.read_csv('/content/colon_cancer.csv')
numRows, numCols =  np.shape(dataset)

model=ga(function=f,dimension=length,variable_type='bool')
#,variable_boundaries=varbound)

model.run()

arrayIndx = [0,1,1]
arrayOutput=np.zeros(3)
j=0
for i in range(3):
  if arrayIndx[i] ==1:
    arrayOutput[j] = i
    j=j+1

print(arrayOutput)

dataset = pd.read_csv('/content/colon_cancer.csv')
numRows, numCols =  np.shape(dataset)
X=dataset.iloc[0:numRows, arrayOutput].values
Y = dataset.iloc[0:numRows, numCols-1].values

X[:,:]



#varbound=np.array({0,1}*3)
#varbound

#dimension=30,variable_type='bool')

import numpy as np
from geneticalgorithm import geneticalgorithm as ga

length = 5
#length = len(document_text)
similarity_i = np.zeros(length)
print("length is : ", length)

varbound=np.array([[0,10]]*length)

def f(combinational_array):
  X=dataset.iloc[0:numRows, combinational_array].values
  Y = dataset.iloc[0:numRows, numCols-1].values
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)
  svmModel  = svm.SVC()
  svmModel.fit(X_train, Y_train)
  X_Predict = svmModel.predict(X_test)
  predictedValue = accuracy_score(X_Predict, Y_test)
  return -1 * predictedValue

def p(combinational_array):
    penality=0
    M= 50
    N=length/4
    if sum(combinational_array) < N:
      penality=(np.sum(combinational_array))
    else:
      penality = M
    return penality


combinational_array=np.array([[0,1]]*length)


model=ga(function=f,dimension=length,variable_type='real',variable_boundaries=varbound)

model.run()
print(combinational_array)

import numpy as np
from geneticalgorithm import geneticalgorithm as ga

length = 5
#length = len(document_text)
similarity_i = np.zeros(length)
print("length is : ", length)

varbound=np.array([[0,10]]*length)

def f(combinational_array):
  for i in range(length):
    print("i is: ", i, "\n")
    if combinational_array[i] >0:
      similarity_i[i] =  combinational_array[i] * similarity(document_text[i][2])
    else:
      similarity_i[i] = 0
  sum = np.sum(similarity_i)
  return  -1*sum

def p(combinational_array):
    penality=0
    M= 50
    N=length/4
    if sum(combinational_array) < N:
      penality=(np.sum(combinational_array))
    else:
      penality = M
    return penality


combinational_array=np.array([[0,1]]*length)


model=ga(function=f,dimension=length,variable_type='real',variable_boundaries=varbound)

model.run()
print(combinational_array)

varbound=np.array([[0,10]]*numCols)

X = dataset.iloc[0:numRows, 0:numCols-1].values
Y = dataset.iloc[0:numRows, numCols-1].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)
svmModel  = svm.SVC()
svmModel.fit(X_train, Y_train)

NewMatrix = X_train[0:numRows, 0:numCols-1]
svmModel.fit(NewMatrix, Y_train)
X_Predict = svmModel.predict(X_test)
X_Predict



import pandas as pd
import numpy as np
import sklearn
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from geneticalgorithm import geneticalgorithm as ga

dataset = pd.read_csv('/content/colon_cancer.csv')
numRows, numCols =  np.shape(dataset)


def getIndx(arrayIndx):
  lenArr = len(arrayIndx)
  arrayOutput=np.zeros(lenArr)
  j=0
  for i in range(lenArr):
    if arrayIndx[i] >= 0.5:
      arrayOutput[j] = i
      j=j+1
  return arrayOutput


def f(combinational_array):
  #X=dataset.iloc[0:numRows, 0:2].values

  print('the new ga array is: ')
  print(combinational_array)
  print(getIndx(combinational_array))


  X=dataset.iloc[0:numRows, getIndx(combinational_array)].values
  Y = dataset.iloc[0:numRows, numCols-1].values
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)
  svmModel  = svm.SVC()
  svmModel.fit(X_train, Y_train)
  X_Predict = svmModel.predict(X_test)
  predictedValue = accuracy_score(X_Predict, Y_test)
  return predictedValue


length = 10
#length = len(document_text)
similarity_i = np.zeros(length)
print("length is : ", length)

dataset = pd.read_csv('/content/colon_cancer.csv')
numRows, numCols =  np.shape(dataset)

varbound=np.array([[0,1]]*length)
model=ga(function=f,dimension=length,variable_type='int', variable_boundaries=varbound)

model.run()

"""# **Latest code here**

"""

pip install geneticalgorithm

import pandas as pd
import numpy as np
import sklearn
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from geneticalgorithm import geneticalgorithm as ga

dataset = pd.read_csv('/content/colon_cancer.csv')
numRows, numCols =  np.shape(dataset)


def getIndx(arrayIndx):
  lenArr = len(arrayIndx)
  arrayOutput=np.zeros(lenArr)
  j=0
  for i in range(lenArr):
    if arrayIndx[i] >= 0.5:
      arrayOutput[j] = i
      j=j+1

  if j==0:
    return ([0])

  arrayReturn=np.zeros(j)
  for i in range(j):
      arrayReturn[i] = arrayOutput[i]

  return arrayReturn


def f(combinational_array):

  print('the new ga array is: ')
  print(combinational_array)
  arrayToTest = getIndx(combinational_array)
  print(arrayToTest)


  X=dataset.iloc[0:numRows, arrayToTest].values
  Y = dataset.iloc[0:numRows, numCols-1].values
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)
  svmModel  = svm.SVC()
  svmModel.fit(X_train, Y_train)
  X_Predict = svmModel.predict(X_test)
  predictedValue = accuracy_score(X_Predict, Y_test)
  print ("predictedValue: ")
  print(predictedValue)
  return  -1 * predictedValue


#length = 10
length = int(numCols/4)
print("length is : ", length)

varbound=np.array([[0,1]]*length)
model=ga(function=f,dimension=length,variable_type='int', variable_boundaries=varbound)

model.run()